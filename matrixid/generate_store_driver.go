//+build ignore

package main

import (
	"bytes"
	"go/format"
	"io/ioutil"
	"log"
	"strings"
	"text/template"
)

func main() {
	names := []string{
		"StoreToken",
		"GetTokens",
		"MarkTokensAsSent",
		"StoreEphemeralPublicKey",
		"ValidateEphemeralPublicKey",
		"GetSenderForToken",

		"SignedAssociationStringForThreepid",
		"GlobalGetMxid",
		"GlobalGetMxids",
		"GlobalRemoveAssociation",
		"GlobalAddAssociation",

		"GetPeerByName",
		"GetAllPeers",
		"SetLastSentVersionAndPokeSucceeded",
		"SetSendAttemptNumber",
		"SetValidated",
		"SetMtime",
		"GetSessionByID",
		"GetTokenSessionByID",
		"GlobalLastIDFromServer",
		"LocalAddOrUpdateAssociation",
		"GetTokenSession",
		"CreateTokenSession",
		"AddValidationSession",
		"GetAssociationsAfterId",
		"GetLocal3pid",
		"LocalRemoveAssociation",
		"CreateTMPMxid",
	}

	tpl, err := template.New("yay").Funcs(template.FuncMap{
		"low": strings.ToLower,
	}).Parse(driverTpl)
	if err != nil {
		log.Fatal(err)
	}
	var buf bytes.Buffer
	err = tpl.Execute(&buf, map[string]interface{}{
		"names": names,
		"pkg":   []string{"postgres"},
	})
	if err != nil {
		log.Fatal(err)
	}
	b, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	ioutil.WriteFile("store/driver_impl_gen.go", b, 0600)
}

const driverTpl = `// Code generated by generate_store_driver.go. DO NOT EDIT.

package store
import(
	"fmt"
	{{- range .pkg}}
	"github.com/gernest/sydent-go/store/drivers/{{.}}"
	{{end}}
)
type DriverHandle struct{
	{{- range .names -}}
	{{.|low}} string
	{{end -}}
	name string
	param func(int)string
}

func NewDriver(name string)(Driver,error){
	switch name{
		{{- range .pkg -}}
	case "{{.}}":
		return {{.}}Impl(),nil
		{{end -}}
	default:
		return nil, fmt.Errorf("%s is not supported",name)
	}
}
{{range .names}}
func (h DriverHandle){{.}}()string{
	return h.{{.|low}}
}
{{end}}
func (h DriverHandle)Name()string{
	return h.name
}

func (h DriverHandle)Param(idx int)string{
	return h.param(idx)
}
{{$ctx:=.}}
{{range .pkg}}
{{$pkg:=.}}
func {{.}}Impl()*DriverHandle{
	return &DriverHandle{
		{{- range $ctx.names -}}
		{{.|low}}:{{$pkg}}.{{.}},
		{{end -}}
		name:"{{$pkg}}",
		param:{{$pkg}}.Param,
	}
}
{{end}}
`
