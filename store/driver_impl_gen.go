// Code generated by generate_store_driver.go. DO NOT EDIT.

package store

import (
	"fmt"
	"github.com/gernest/sydent-go/store/drivers/postgres"
)

type DriverHandle struct {
	storetoken                         string
	gettokens                          string
	marktokensassent                   string
	storeephemeralpublickey            string
	validateephemeralpublickey         string
	getsenderfortoken                  string
	signedassociationstringforthreepid string
	globalgetmxid                      string
	globalgetmxids                     string
	globalremoveassociation            string
	globaladdassociation               string
	getpeerbyname                      string
	getallpeers                        string
	setlastsentversionandpokesucceeded string
	setsendattemptnumber               string
	setvalidated                       string
	setmtime                           string
	getsessionbyid                     string
	gettokensessionbyid                string
	globallastidfromserver             string
	localaddorupdateassociation        string
	gettokensession                    string
	createtokensession                 string
	addvalidationsession               string
	getassociationsafterid             string
	getlocal3pid                       string
	localremoveassociation             string
	createtmpmxid                      string
	name                               string
	param                              func(int) string
}

func NewDriver(name string) (Driver, error) {
	switch name {
	case "postgres":
		return postgresImpl(), nil
	default:
		return nil, fmt.Errorf("%s is not supported", name)
	}
}

func (h DriverHandle) StoreToken() string {
	return h.storetoken
}

func (h DriverHandle) GetTokens() string {
	return h.gettokens
}

func (h DriverHandle) MarkTokensAsSent() string {
	return h.marktokensassent
}

func (h DriverHandle) StoreEphemeralPublicKey() string {
	return h.storeephemeralpublickey
}

func (h DriverHandle) ValidateEphemeralPublicKey() string {
	return h.validateephemeralpublickey
}

func (h DriverHandle) GetSenderForToken() string {
	return h.getsenderfortoken
}

func (h DriverHandle) SignedAssociationStringForThreepid() string {
	return h.signedassociationstringforthreepid
}

func (h DriverHandle) GlobalGetMxid() string {
	return h.globalgetmxid
}

func (h DriverHandle) GlobalGetMxids() string {
	return h.globalgetmxids
}

func (h DriverHandle) GlobalRemoveAssociation() string {
	return h.globalremoveassociation
}

func (h DriverHandle) GlobalAddAssociation() string {
	return h.globaladdassociation
}

func (h DriverHandle) GetPeerByName() string {
	return h.getpeerbyname
}

func (h DriverHandle) GetAllPeers() string {
	return h.getallpeers
}

func (h DriverHandle) SetLastSentVersionAndPokeSucceeded() string {
	return h.setlastsentversionandpokesucceeded
}

func (h DriverHandle) SetSendAttemptNumber() string {
	return h.setsendattemptnumber
}

func (h DriverHandle) SetValidated() string {
	return h.setvalidated
}

func (h DriverHandle) SetMtime() string {
	return h.setmtime
}

func (h DriverHandle) GetSessionByID() string {
	return h.getsessionbyid
}

func (h DriverHandle) GetTokenSessionByID() string {
	return h.gettokensessionbyid
}

func (h DriverHandle) GlobalLastIDFromServer() string {
	return h.globallastidfromserver
}

func (h DriverHandle) LocalAddOrUpdateAssociation() string {
	return h.localaddorupdateassociation
}

func (h DriverHandle) GetTokenSession() string {
	return h.gettokensession
}

func (h DriverHandle) CreateTokenSession() string {
	return h.createtokensession
}

func (h DriverHandle) AddValidationSession() string {
	return h.addvalidationsession
}

func (h DriverHandle) GetAssociationsAfterId() string {
	return h.getassociationsafterid
}

func (h DriverHandle) GetLocal3pid() string {
	return h.getlocal3pid
}

func (h DriverHandle) LocalRemoveAssociation() string {
	return h.localremoveassociation
}

func (h DriverHandle) CreateTMPMxid() string {
	return h.createtmpmxid
}

func (h DriverHandle) Name() string {
	return h.name
}

func (h DriverHandle) Param(idx int) string {
	return h.param(idx)
}

func postgresImpl() *DriverHandle {
	return &DriverHandle{storetoken: postgres.StoreToken,
		gettokens:                          postgres.GetTokens,
		marktokensassent:                   postgres.MarkTokensAsSent,
		storeephemeralpublickey:            postgres.StoreEphemeralPublicKey,
		validateephemeralpublickey:         postgres.ValidateEphemeralPublicKey,
		getsenderfortoken:                  postgres.GetSenderForToken,
		signedassociationstringforthreepid: postgres.SignedAssociationStringForThreepid,
		globalgetmxid:                      postgres.GlobalGetMxid,
		globalgetmxids:                     postgres.GlobalGetMxids,
		globalremoveassociation:            postgres.GlobalRemoveAssociation,
		globaladdassociation:               postgres.GlobalAddAssociation,
		getpeerbyname:                      postgres.GetPeerByName,
		getallpeers:                        postgres.GetAllPeers,
		setlastsentversionandpokesucceeded: postgres.SetLastSentVersionAndPokeSucceeded,
		setsendattemptnumber:               postgres.SetSendAttemptNumber,
		setvalidated:                       postgres.SetValidated,
		setmtime:                           postgres.SetMtime,
		getsessionbyid:                     postgres.GetSessionByID,
		gettokensessionbyid:                postgres.GetTokenSessionByID,
		globallastidfromserver:             postgres.GlobalLastIDFromServer,
		localaddorupdateassociation:        postgres.LocalAddOrUpdateAssociation,
		gettokensession:                    postgres.GetTokenSession,
		createtokensession:                 postgres.CreateTokenSession,
		addvalidationsession:               postgres.AddValidationSession,
		getassociationsafterid:             postgres.GetAssociationsAfterId,
		getlocal3pid:                       postgres.GetLocal3pid,
		localremoveassociation:             postgres.LocalRemoveAssociation,
		createtmpmxid:                      postgres.CreateTMPMxid,
		name:                               "postgres",
		param:                              postgres.Param,
	}
}
